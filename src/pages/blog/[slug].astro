---
import type { GetStaticPaths } from "astro";
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import Button from "~/components/Button.astro";
import Prose from "~/components/Prose.astro";
import BaseLayout from "~/layouts/Layout.astro";
import { components } from "~/components/mdx";
import "@fontsource-variable/jetbrains-mono";
import jetbrainsMonoFile from "@fontsource-variable/jetbrains-mono/files/jetbrains-mono-latin-wght-normal.woff2?url";
import { db } from "~/db";
import { eq } from "drizzle-orm";

export const getStaticPaths = (async () => {
  return (await getCollection("posts")).map((article) => ({
    params: { slug: article.slug },
    props: { article },
  }));
}) satisfies GetStaticPaths;

const { article } = Astro.props;
const { data, slug } = article;
const { Content } = await article.render();

export let likeCount = 0;
export let viewCount = 0;

try {
  const [likes, views] = await Promise.all([
    db.query.likesTable.findFirst({
      where: (ct) => eq(ct.slug, slug),
    }),
    db.query.viewsTable.findFirst({
      where: (ct) => eq(ct.slug, slug),
    }),
  ]);

  if (views) {
    viewCount = views.views;
  }

  if (likes) {
    likeCount = likes.likes;
  }
} catch (error) {
  console.error(error);
}
---

<BaseLayout
  title={data.title}
  description={data.description}
  image={data.cover.src.src}
  article={{
    section: data.category,
    tags: data.tags,
    authors: ["Himanshu Bhardwaz"],
    publishedTime: data.date.toISOString(),
  }}
>
  <Fragment slot="head">
    <link
      rel="preload"
      as="font"
      crossorigin="anonymous"
      href={jetbrainsMonoFile}
      type="font/woff2"
    />
  </Fragment>
  <div class="max-w-xl mx-auto px-4">
    <div class="flex items-center justify-between">
      <Button href="/blog">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          class="h-4 w-4 mr-2 -ml-1"
          ><path
            fill="none"
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="m15 6l-6 6l6 6"></path>
        </svg>
        <span>All articles</span>
      </Button>
      <div class="flex items-center gap-2">
        Likes: {likeCount}, Views: {viewCount}
        <span>|</span>
        <time datetime={data.date.toISOString()}
          >{
            new Intl.DateTimeFormat("en-US", { dateStyle: "medium" }).format(
              data.date
            )
          }</time
        >
      </div>
    </div>
    <Prose class="my-8">
      <Image
        {...data.cover}
        width={576}
        loading="eager"
        transition:name={`article-cover:${article.slug}`}
      />
      <h1 transition:name={`article-title:${article.slug}`}>{data.title}</h1>
      <p class="lead" transition:name={`article-description:${article.slug}`}>
        {data.description}
      </p>

      <Content {components} />
    </Prose>
    <Button href="/blog">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        class="h-4 w-4 mr-2 -ml-1"
        ><path
          fill="none"
          stroke="currentColor"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="m15 6l-6 6l6 6"></path>
      </svg>
      <span>All articles</span>
    </Button>
  </div>
  <button
    class="fixed bottom-4 right-4 rounded-full bg-bg-subtle border border-border p-2"
    id="like-button"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      stroke-width="1.5"
      stroke="currentColor"
      class="size-6 icon"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z"
      ></path>
    </svg>
  </button>
</BaseLayout>

<style>
  /* Default icon color */
  .icon {
    fill: none;
    stroke: currentColor;
  }

  /* TODO: Liked state color */
  .icon.liked {
    fill: red;
  }
</style>

<script>
  import { getSlugFromURL } from "~/utils/getSlugFromURL";
  import { actions } from "astro:actions";

  if (!localStorage.getItem("viewed")) {
    const { data } = await actions.updateViewCount({ slug: getSlugFromURL() });

    if (data) {
      localStorage.setItem("viewed", data);
    }
  }

  async function toggleLike() {
    const button = document.getElementById("like-button");
    if (!button) return;

    let liked = localStorage.getItem("liked") === "true";

    liked = !liked;
    button.classList.toggle("liked", liked);

    const { data } = await actions.updateLikesCount({
      slug: getSlugFromURL(),
      liked,
    });

    if (data) {
      localStorage.setItem("liked", data.liked);
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    const button = document.getElementById("like-button");
    if (button) button.addEventListener("click", toggleLike);
  });
</script>
