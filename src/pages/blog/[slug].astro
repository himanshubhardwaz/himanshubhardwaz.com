---
import type { GetStaticPaths } from "astro";
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import Button from "~/components/Button.astro";
import Prose from "~/components/Prose.astro";
import Layout from "~/layouts/Layout.astro";
import { components } from "~/components/mdx";
import "@fontsource-variable/jetbrains-mono";
import jetbrainsMonoFile from "@fontsource-variable/jetbrains-mono/files/jetbrains-mono-latin-wght-normal.woff2?url";

export const getStaticPaths = (async () => {
  return (await getCollection("posts")).map((article) => ({
    params: { slug: article.slug },
    props: { article },
  }));
}) satisfies GetStaticPaths;

const { article } = Astro.props;
const { data, slug } = article;
const { Content } = await article.render();

export let likeCount = 0;
export let viewCount = 0;

try {
  const response = await fetch(`${import.meta.env.SITE_URL}/api/blog/${slug}`);
  const { likes, views } = await response.json();
  likeCount = likes;
  viewCount = views;
} catch (error) {
  console.error(error);
}
---

<Layout
  title={data.title}
  description={data.description}
  image={data.cover.src.src}
  article={{
    section: data.category,
    tags: data.tags,
    authors: ["Himanshu Bhardwaz"],
    publishedTime: data.date.toISOString(),
  }}
>
  <Fragment slot="head">
    <link
      rel="preload"
      as="font"
      crossorigin="anonymous"
      href={jetbrainsMonoFile}
      type="font/woff2"
    />
  </Fragment>
  <div class="max-w-xl mx-auto px-4">
    <div class="flex items-center justify-between">
      <Button href="/blog">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          class="h-4 w-4 mr-2 -ml-1"
          ><path
            fill="none"
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="m15 6l-6 6l6 6"></path>
        </svg>
        <span>All articles</span>
      </Button>
      <div class="flex items-center gap-2">
        <time datetime={data.date.toISOString()}
          >{
            new Intl.DateTimeFormat("en-US", { dateStyle: "medium" }).format(
              data.date
            )
          }</time
        >
      </div>
    </div>
    <Prose class="my-8">
      <Image
        {...data.cover}
        width={576}
        loading="eager"
        transition:name={`article-cover:${article.slug}`}
      />
      <h1 transition:name={`article-title:${article.slug}`}>{data.title}</h1>
      <h5>Likes: {likeCount}; Views: {viewCount}</h5>
      <p class="lead" transition:name={`article-description:${article.slug}`}>
        {data.description}
      </p>

      <Content {components} />
    </Prose>
    <Button href="/blog">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        class="h-4 w-4 mr-2 -ml-1"
        ><path
          fill="none"
          stroke="currentColor"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="m15 6l-6 6l6 6"></path>
      </svg>
      <span>All articles</span>
    </Button>
  </div>
  <button
    class="fixed bottom-4 right-4 rounded-full bg-bg-subtle border border-border p-2"
    id="like-button"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      stroke-width="1.5"
      stroke="currentColor"
      id="liked-svg"
      class="size-6 icon"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z"
      ></path>
    </svg>
  </button>
</Layout>

<script>
  import { getSlugFromURL } from "~/utils/getSlugFromURL";
  import type { Article } from "~/types";

  let isLoading = false; // Track loading state

  function getAllArticles() {
    if (!localStorage.getItem("articles")) {
      localStorage.setItem("articles", JSON.stringify([]));
    }
    return JSON.parse(localStorage.getItem("articles")!) as Array<Article>;
  }

  function getArticle() {
    const articles = getAllArticles();
    return articles.find((article) => article.slug === getSlugFromURL());
  }

  function updatedArticlesState(article: Article) {
    let allArticles = getAllArticles();
    const currArticleIndex = allArticles.findIndex(
      (article) => article.slug === getSlugFromURL()
    );
    allArticles[currArticleIndex] = article;
    localStorage.setItem("articles", JSON.stringify(allArticles));
  }

  function initiateLocalStorage() {
    const article = getArticle();

    if (!article) {
      localStorage.setItem(
        "articles",
        JSON.stringify([
          ...getAllArticles(),
          { slug: getSlugFromURL(), viewed: false, liked: false },
        ])
      );
      return getArticle();
    }

    return article;
  }

  initiateLocalStorage();

  function isArticleViewed() {
    const article = getArticle();
    return article?.viewed;
  }

  function isArticleLiked() {
    const article = getArticle();
    return article?.liked;
  }

  function updateLikeState(liked: boolean) {
    let article = getArticle();
    if (!article) {
      initiateLocalStorage();
      article = getArticle();
    }

    article!.liked = liked;

    updatedArticlesState(article!);
  }

  function updatedViewState(viewed: boolean) {
    let article = getArticle();
    if (!article) {
      initiateLocalStorage();
      article = getArticle();
    }

    article!.viewed = viewed;

    updatedArticlesState(article!);
  }

  if (isArticleLiked()) {
    document.getElementById("liked-svg")?.classList.add("liked");
  }

  if (!isArticleViewed()) {
    try {
      const response = await fetch(
        `${import.meta.env.SITE_URL}/api/blog/${getSlugFromURL()}`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ viewed: true }),
        }
      );
      const { viewed } = await response.json();
      updatedViewState(viewed);
    } catch (error) {
      console.error(error);
    }
  }

  async function toggleLike() {
    if (isLoading) return; // Prevent multiple clicks
    isLoading = true;

    const button = document.getElementById("like-button") as HTMLButtonElement;
    if (!button) return;

    button.disabled = true; // Disable the button during the operation
    button.classList.add("loading"); // Add a loading class

    let liked = isArticleLiked();

    liked = !liked;
    const likedSvg = document.getElementById("liked-svg");
    if (likedSvg) likedSvg.classList.toggle("liked", liked);

    try {
      const response = await fetch(
        `${import.meta.env.SITE_URL}/api/blog/${getSlugFromURL()}`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ liked }),
        }
      );
      const { liked: updatedLiked } = await response.json();
      updateLikeState(updatedLiked);
      if (likedSvg) likedSvg.classList.toggle("liked", updatedLiked);
    } catch (error) {
      updateLikeState(!liked);
    } finally {
      isLoading = false;
      button.disabled = false;
      button.classList.remove("loading");
    }
  }

  if (isLoading) {
    document.getElementById("like-button")?.classList.add("loading");
  } else {
    document.getElementById("like-button")?.classList.remove("loading");
  }

  const button = document.getElementById("like-button") as HTMLButtonElement;
  if (button) button.addEventListener("click", toggleLike);
  else console.error("Like button not found");
</script>

<style>
  .icon {
    fill: none;
    stroke: currentColor;
  }
  .icon.liked {
    animation: likeAnimation 0.3s ease-in-out forwards;
  }
  @keyframes likeAnimation {
    0% {
      transform: scale(1);
      fill: none;
      stroke: currentColor;
    }
    50% {
      transform: scale(1.3);
      fill: red;
      stroke: red;
    }
    100% {
      transform: scale(1);
      fill: red;
      stroke: red;
    }
  }
  #like-button.loading {
    opacity: 0.6;
    pointer-events: none;
    cursor: not-allowed;
  }
</style>
